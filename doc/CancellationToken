CancellationToken в C# — это структура, предназначенная для управления отменой операций, особенно в контексте асинхронного программирования. Он позволяет разработчикам создавать отзывчивые приложения, которые могут прерывать длительные операции по запросу.
Основные компоненты
CancellationToken и CancellationTokenSource — это два ключевых элемента:
CancellationTokenSource: Этот класс управляет токенами отмены. Он создает объект CancellationToken и предоставляет методы для инициирования отмены, такие как Cancel() и CancelAfter().
CancellationToken: Это структура, которая представляет запрос на отмену. Он передается в задачи или потоки, которые должны реагировать на отмену.

Принцип работы
Создание источника токена:
csharp
CancellationTokenSource cts = new CancellationTokenSource();
CancellationToken token = cts.Token;

Передача токена в задачу:
Токен передается в асинхронные методы или задачи, чтобы они могли отслеживать статус отмены.
Task myTask = Task.Run(() => DoWork(token), token);

Запрос на отмену:
Когда необходимо прервать выполнение, вызывается метод Cancel():
cts.Cancel();

Проверка статуса отмены:
Внутри выполняемой задачи необходимо регулярно проверять состояние токена:

if (token.IsCancellationRequested) {
    Console.WriteLine("Операция прервана");
    return; // Завершение задачи
}

Рассмотрим пример, где задача вычисляет факториал числа, и может быть отменена:
csharp
public static void Factorial(int x, CancellationToken token) {
    int result = 1;
    for (int i = 1; i <= x; i++) {
        if (token.IsCancellationRequested) {
            Console.WriteLine("Операция прервана токеном");
            return;
        }
        result *= i;
        Console.WriteLine($"Факториал числа {i} равен {result}");
        Thread.Sleep(500); // Имитация длительной операции
    }
}

В этом примере, если токен отмены был запрошен, программа завершит выполнение цикла и выведет сообщение о прерывании.
Регистрация действий при отмене
Можно также зарегистрировать действия, которые будут выполнены при отмене токена:
csharp
token.Register(() => Console.WriteLine("Операция была отменена."));

Это позволяет выполнить дополнительные действия при завершении операции.
Заключение
Использование CancellationToken в C# значительно упрощает управление длительными задачами и позволяет создавать более отзывчивые приложения. Это особенно важно в многопоточных и асинхронных сценариях, где пользователи могут ожидать возможность прерывания операций без необходимости завершения всего приложения.